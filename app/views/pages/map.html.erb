<div class="row my-5">
    <div class="col-md-1">
    </div>
    <div class="col-md-10 card">
        <div class="row">
            <div class="col-md-4 card">
                <div class="card-body">
                    <h2 class="text-center">Map Data Access </h2>
                    <form>
                        <div class="form-group">
                            <label for="exampleInputEmail1">Data List :</label>
                            <select class="form-control" id="select-data-list">
                                <option value="data-vegetation">Cloud free vegetation</option>
                                <option value="data-vegetation">Vegetation Changes</option>
                                <option value="data-land-cover-type">Land cover map</option>
                                <option value="data-land-surface-temperature">Land Surface Temperature</option>
                                <option value="data-chlor-a">Chlorophyll-a</option>
                                <option value="data-sst">Sea Surface Temperature </option>
                                <option value="data-night-time">Night time light data</option>
                                <option value="data-fire">Emergency data – Fire</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="exampleInputEmail1">Date :</label>
                            <div class="input-group date" data-provide="datepicker" class="datepicker">
                                <input type="text" class="form-control">
                                <div class="input-group-addon">
                                    <span class="glyphicon glyphicon-th"></span>
                                </div>
                            </div>
                        </div>

                    </form>
                    <hr>
                    <p><strong>Description : </strong></p>
                    <p>VIIRS Sea Surface Temperature (SST)<p>
                            <span>Sea Surface Temperature (SST) is a measure of the energy due to the motion of
                                molecules at the top layer of the ocean.
                                Depending on the sensor, spaceborne measurements give us an unprecedented global
                                measurement of sea surface temperatures every
                                few days to a week. Temperatures are measured from approximately 10 µm below the surface
                                (infrared bands) to 1mm
                                (microwave bands) depths using radiometers. SST is an important input for regional and
                                global climate analysis and weather modeling.
                                Coverage is limited by orbital pass and cloud cover. Resolution is 1km at nadir. <span>
                </div>
            </div>
            <div class="col-md-8" style=" background:#eee; text-align:center; ">
                <span>Scrool mousewheel up/down to zoom in and zoom out</span>
                <canvas class="text-center"></canvas>

            </div>
        </div>
    </div>

</div>

<script>
    $('.datepicker').datepicker({
        format: 'mm/dd/yyyy'
    });

    var image_selected = '<%= asset_path( 'data-night-time.png' ) %>';
    $('#select-data-list').change(function () {
        var selectedCountry = $(this).children("option:selected").val();

        if (selectedCountry == "data-vegetation") {
            image_selected = '<%= asset_path( 'data-night-time.png' ) %>'
        } else if (selectedCountry == "data-land-cover-type") {
            image_selected = '<%= asset_path( 'data-night-time.png' ) %>'
        } else if (selectedCountry == "data-land-surface-temperature") {
            image_selected = '<%= asset_path( 'data-night-time.png' ) %>'
        } else if (selectedCountry == "data-chlor-a") {
            image_selected = '<%= asset_path( 'data-night-time.png' ) %>'
        } else if (selectedCountry == "data-sst") {
            image_selected = '<%= asset_path( 'data-night-time.png' ) %>'
        } else if (selectedCountry == "data-night-time") {
            image_selected = '<%= asset_path( 'data-night-time.png' ) %>'
        } else if (selectedCountry == "data-fire") {
            image_selected = '<%= asset_path( 'data-night-time.png' ) %>'
        }
    });
    var canvas = document.getElementsByTagName('canvas')[0];
    canvas.width = 1000;
    canvas.height = 800;

    var gkhead = new Image;

    var ctx = canvas.getContext('2d');
        trackTransforms(ctx);

        function redraw() {

            // Clear the entire canvas
            var p1 = ctx.transformedPoint(0, 0);
            var p2 = ctx.transformedPoint(canvas.width, canvas.height);
            ctx.clearRect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y);

            ctx.save();
            ctx.setTransform(1, 0, 0, 1, 0, 0);
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.restore();

            ctx.drawImage(gkhead, 0, 0);

        }
        redraw();

        var lastX = canvas.width / 1,
            lastY = canvas.height / 1;

        var dragStart, dragged;

        $('.zoom').on('click', function (evt) {
            dragStart = null;
            if (!dragged) zoom(evt.shiftKey ? -1 : 1);
        }, false);

        //render the zoomed out image when zoom out button is clicked
        $('.reset').on('click', function (evt) {
            document.body.style.mozUserSelect = document.body.style.webkitUserSelect = document.body.style
                .userSelect = 'none';
            lastX = evt.offsetX || (evt.pageX - canvas.offsetLeft);
            lastY = evt.offsetY || (evt.pageY - canvas.offsetTop);
            dragStart = ctx.transformedPoint(lastX, lastY);
            dragged = false;
        }, false);

        canvas.addEventListener('mousedown', function (evt) {
            document.body.style.mozUserSelect = document.body.style.webkitUserSelect = document.body.style
                .userSelect = 'none';
            lastX = evt.offsetX || (evt.pageX - canvas.offsetLeft);
            lastY = evt.offsetY || (evt.pageY - canvas.offsetTop);
            dragStart = ctx.transformedPoint(lastX, lastY);
            dragged = false;
        }, false);

        canvas.addEventListener('mousemove', function (evt) {
            lastX = evt.offsetX || (evt.pageX - canvas.offsetLeft);
            lastY = evt.offsetY || (evt.pageY - canvas.offsetTop);
            dragged = true;
            if (dragStart) {
                var pt = ctx.transformedPoint(lastX, lastY);
                ctx.translate(pt.x - dragStart.x, pt.y - dragStart.y);
                redraw();
            }
        }, false);

        canvas.addEventListener('mouseup', function (evt) {
            dragStart = null;
            if (!dragged) zoom(evt.shiftKey ? -1 : 1);
        }, false);

        var scaleFactor = 1.1;

        var zoom = function (clicks) {
            var pt = ctx.transformedPoint(lastX, lastY);
            ctx.translate(pt.x, pt.y);
            var factor = Math.pow(scaleFactor, clicks);
            ctx.scale(factor, factor);
            ctx.translate(-pt.x, -pt.y);
            redraw();
        }

        var handleScroll = function (evt) {
            var delta = evt.wheelDelta ? evt.wheelDelta / 40 : evt.detail ? -evt.detail : 0;
            if (delta) zoom(delta);
            return evt.preventDefault() && false;
        };

        canvas.addEventListener('DOMMouseScroll', handleScroll, false);
        canvas.addEventListener('mousewheel', handleScroll, false);
    gkhead.src = image_selected;

    // Adds ctx.getTransform() - returns an SVGMatrix
    // Adds ctx.transformedPoint(x,y) - returns an SVGPoint
    function trackTransforms(ctx) {
        var svg = document.createElementNS("http://www.w3.org/2000/svg", 'svg');
        var xform = svg.createSVGMatrix();
        ctx.getTransform = function () {
            return xform;
        };

        var savedTransforms = [];
        var save = ctx.save;
        ctx.save = function () {
            savedTransforms.push(xform.translate(0, 0));
            return save.call(ctx);
        };

        var restore = ctx.restore;
        ctx.restore = function () {
            xform = savedTransforms.pop();
            return restore.call(ctx);
        };

        var scale = ctx.scale;
        ctx.scale = function (sx, sy) {
            xform = xform.scaleNonUniform(sx, sy);
            return scale.call(ctx, sx, sy);
        };

        var rotate = ctx.rotate;
        ctx.rotate = function (radians) {
            xform = xform.rotate(radians * 180 / Math.PI);
            return rotate.call(ctx, radians);
        };

        var translate = ctx.translate;
        ctx.translate = function (dx, dy) {
            xform = xform.translate(dx, dy);
            return translate.call(ctx, dx, dy);
        };

        var transform = ctx.transform;
        ctx.transform = function (a, b, c, d, e, f) {
            var m2 = svg.createSVGMatrix();
            m2.a = a;
            m2.b = b;
            m2.c = c;
            m2.d = d;
            m2.e = e;
            m2.f = f;
            xform = xform.multiply(m2);
            return transform.call(ctx, a, b, c, d, e, f);
        };

        var setTransform = ctx.setTransform;
        ctx.setTransform = function (a, b, c, d, e, f) {
            xform.a = a;
            xform.b = b;
            xform.c = c;
            xform.d = d;
            xform.e = e;
            xform.f = f;
            return setTransform.call(ctx, a, b, c, d, e, f);
        };

        var pt = svg.createSVGPoint();
        ctx.transformedPoint = function (x, y) {
            pt.x = x;
            pt.y = y;
            return pt.matrixTransform(xform.inverse());
        }
    }
</script>